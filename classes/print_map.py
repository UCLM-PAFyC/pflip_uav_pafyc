# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PflipUav3
                                 A QGIS plugin
 Photogrammetric and Remote Sensing Flight Planning for unmanned aerial vehicle
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-08-23
        git sha              : $Format:%H$
        copyright            : (C) 2019 by David Hern치ndez L칩pez, PAFYC-UCLM
        email                : david.hernandez@uclm.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Import PyQt5 classes
from PyQt5.QtCore import (Qt, QCoreApplication, QFileInfo)
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QColor

# import PyQGIS classes
from qgis.core import (Qgis, QgsFeature, QgsLayoutItemPicture, QgsProject)

# Import self classes
from .qgis3_print_layout import PrintLayout
from ..classes.db_operations import *

from .. import config as c  # constants

# others imports
import os
import datetime

class PrintMap():
    """
    Clase para la impresi칩n de mapas en formato pdf
    """
    def __init__(self,
                 iface,
                 path_db_project,
                 path_file_map_pdf,
                 nemo,
                 cod_flight_block_dlg,
                 title,
                 author,
                 company,
                 str_crs_epsg,
                 map_scale_factor,
                 map_number_grid_divisions,
                 path_logo,
                 path_logo_2,
                 str_firmware):
        #TODOC:

        self.iface = iface
        self.path_db_project = path_db_project
        self.path_file_map_pdf = path_file_map_pdf
        self.nemo = nemo
        self.cod_flight_block_dlg = cod_flight_block_dlg
        self.title = title
        self.author = author
        self.company = company
        self.str_crs_epsg = str_crs_epsg
        self.map_scale_factor = map_scale_factor
        self.map_number_grid_divisions = map_number_grid_divisions
        self.path_logo = path_logo
        self.path_logo_2 = path_logo_2
        self.str_firmware = str_firmware

        self.db_op = DbOperations(self.iface)  # new db operations

    def get_adjust_scale(self,
                         qgsrectangle,
                         width_mm,
                         height_mm,
                         factor_escala_zoom):
        #TODOC:
        qgsrect_x_min = qgsrectangle.xMinimum()
        qgsrect_x_max = qgsrectangle.xMaximum()
        width_m = qgsrect_x_max - qgsrect_x_min
        m_width_scale = width_m * 1000 / width_mm

        qgsrect_y_min = qgsrectangle.yMinimum()
        qgsrect_y_max = qgsrectangle.yMaximum()
        height_m = qgsrect_y_max - qgsrect_y_min
        m_height_scale = height_m * 1000 / height_mm

        if m_height_scale >= m_width_scale:
            m_scale = m_height_scale * factor_escala_zoom
        else:
            m_scale = m_width_scale * factor_escala_zoom

        return m_scale

    def process(self):
        #TODOC:

        # recupera valores de par치metros grabados en la tabla flight_block de la BD
        lst_parameters_db_current_flight_block = \
            self.db_op.get_parameter_db_flight_block(self.path_db_project,
                                                     self.cod_flight_block_dlg)

        int_photogrammetric_mission_type = lst_parameters_db_current_flight_block[6]
        if int_photogrammetric_mission_type == 1:  # vuelo lineal
            str_photogrammetric_mission_type = "Linear route"
        if int_photogrammetric_mission_type == 2:  # vuelo zonal
            str_photogrammetric_mission_type = "Polygonal area"
        if int_photogrammetric_mission_type == 4:  # vuelo zonal
            str_photogrammetric_mission_type = "Template project"

        str_data_sensor_code = lst_parameters_db_current_flight_block[1]  # str_cod_camera
        int_tof_point = lst_parameters_db_current_flight_block[3]
        int_lnd_point = lst_parameters_db_current_flight_block[4]  # (-1 - toff point; 0 - end point; > 0 - id del punto digitalizado)
        if int_lnd_point == -1:
            str_lnd_point = "Take-off point"
        if int_lnd_point == 0:
            str_lnd_point = "End point"
        if int_lnd_point > 0:
            str_lnd_point = str(int_lnd_point)
        float_lineal_zone_enlargement = lst_parameters_db_current_flight_block[19]
        str_path_dtm = lst_parameters_db_current_flight_block[2]

        float_gsd = lst_parameters_db_current_flight_block[7]
        points_by_footprint_side = lst_parameters_db_current_flight_block[24]
        float_forward_overlap = lst_parameters_db_current_flight_block[9]
        float_side_overlap = lst_parameters_db_current_flight_block[10]
        float_average_height_object = lst_parameters_db_current_flight_block[44]

        layout_name = "PFliP UAV layout Project [" + self.title + "], Flight Block [" + self.cod_flight_block_dlg + "]"
        self.obj_pl = PrintLayout(self.iface,
                                  layout_name)

        # define fonts to use
        qfont_default = self.obj_pl.format_qfont()
        qfont_08_normal = self.obj_pl.format_qfont(int_size=8)
        qfont_10_bold = self.obj_pl.format_qfont(int_size=10,
                                                 is_bold=True)
        qfont_11_bold = self.obj_pl.format_qfont(int_size=11,
                                                 is_bold=True)
        qfont_12_bold = self.obj_pl.format_qfont(int_size=12,
                                                 is_bold=True)
        # map
        width_mm = 300.0
        height_mm = 275.0

        qgsrectangle_origin = self.iface.mapCanvas().extent()
        m_scale = self.get_adjust_scale(qgsrectangle_origin,
                                        width_mm,
                                        height_mm,
                                        self.map_scale_factor)

        qgs_layout_item_map = self.obj_pl.add_map_layout_item(None,
                                                              qgsrectangle_origin,
                                                              12.0, 10.0, width_mm, height_mm,
                                                              m_scale)

        interval_grid = round(((width_mm / 1000) * m_scale / self.map_number_grid_divisions), -2)

        self.obj_pl.add_map_grid_layout_item(qgs_layout_item_map,
                                             interval_grid)
        # legend
        str_title_legend = "Legend"
        self.obj_pl.add_legend_layout_item(qgs_layout_item_map,
                                           str_title_legend,
                                           320, 194,
                                           qfont_12_bold,
                                           qfont_11_bold,
                                           qfont_default,
                                           qfont_default,
                                           1.0,
                                           1)
        # frames properties
        props_frames = {}
        props_frames["color"] = "255,0,0,0"
        props_frames["style"] = "solid"
        props_frames["style_border"] = "solid"
        props_frames["color_border"] = "#e92324"
        props_frames["width_border"] = "0.3"

        # frame general
        self.obj_pl.add_nodes_based_shape_layout_item(props_frames,
                                                      316, 10, 94, 275)

        # frame project parameters
        self.obj_pl.add_nodes_based_shape_layout_item(props_frames,
                                                      318, 33, 90, 32)

        # label header project parameters
        str_text = "Project parameters"
        self.obj_pl.add_label_layout_item(str_text, qfont_12_bold,
                                          320, 29, 42, 7,
                                          Qt.AlignHCenter, Qt.AlignVCenter, False,
                                          QColor(233, 35, 36),
                                          QColor(255,255,255))

        # frame flight block parameters
        self.obj_pl.add_nodes_based_shape_layout_item(props_frames,
                                                      318, 72, 90, 120)

        # label header flight block parameters
        str_text = "Flight block parameters"
        self.obj_pl.add_label_layout_item(str_text, qfont_12_bold,
                                          320, 69, 49, 7,
                                          Qt.AlignHCenter, Qt.AlignVCenter, False,
                                          QColor(233, 35, 36),
                                          QColor(255,255,255))

        # label nemo
        str_text = "Project nemo: " + self.nemo
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          320, 39, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label title
        str_text = "Title: " + self.title
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          320, 45, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label author
        str_text = "Author: " + self.author
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          320, 51, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label company
        str_text = "Company: " + self.company
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          320, 57, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label flight_block
        str_text = "Flight block code: " + self.cod_flight_block_dlg
        self.obj_pl.add_label_layout_item(str_text, qfont_10_bold,
                                          320, 79, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label Project data definition
        str_text = "Project Data Definition"
        self.obj_pl.add_label_layout_item(str_text, qfont_11_bold,
                                          322, 91, 88, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False,
                                          font_color=QColor(233, 35, 36))

        # label General Data
        str_text = "General Data"
        self.obj_pl.add_label_layout_item(str_text, qfont_10_bold,
                                          320, 85, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False,
                                          font_color=QColor(233, 35, 36))

        # label Photogrammetric mission type
        str_text = "Photogrammetric mission type: " + str_photogrammetric_mission_type
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          324, 97, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label UAV model & firmware version
        str_text = "UAV model & firmware version: " + self.str_firmware
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          324, 103, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label Spatial Data
        str_text = "Spatial Data"
        self.obj_pl.add_label_layout_item(str_text, qfont_10_bold,
                                          322, 109, 88, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False,
                                          font_color=QColor(233, 35, 36))

        # label tof point
        str_tof_point = str(int_tof_point)
        str_text = "Take off point code: " + str_tof_point
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          324, 121, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label tof point
        str_text = "Landing point code: " + str_lnd_point
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          324, 115, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label Lineal zone enlargement
        str_lineal_zone_enlargement = str(format(float_lineal_zone_enlargement, ".1f"))
        str_text = "Lineal zone enlargement: " + str_lineal_zone_enlargement + " m."
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          324, 127, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label dtm
        str_path = os.path.basename(str_path_dtm)
        str_text = "DTM: " + str_path
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          324, 133, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label Imaging Acquisition Parameters
        str_text = "Imaging Acquisition Parameters"
        self.obj_pl.add_label_layout_item(str_text, qfont_11_bold,
                                          320, 141, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False,
                                          font_color=QColor(233, 35, 36))

        # label data sensor code
        str_text = "Data sensor code: " + str_data_sensor_code
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          322, 147, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # label Geometric Navigation Parameters
        str_text = "Geometric Navigation Parameters"
        self.obj_pl.add_label_layout_item(str_text, qfont_11_bold,
                                          320, 155, 90, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False,
                                          font_color=QColor(233, 35, 36))
        # label gsd
        str_gsd = str(format(float_gsd, ".2f"))
        str_text = "GSD: " + str_gsd + " m."
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          322, 161, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)
        # label points by footprint side
        str_points_by_footprint_side = str(int(points_by_footprint_side))
        str_text = "Points by footprint side: " + str_points_by_footprint_side
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          322, 167, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)
        # label foward overlap
        str_foward_overlap = str(format(float_forward_overlap, ".1f"))
        str_text = "Forward overlap: " + str_foward_overlap + " %"
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          322, 173, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)
        # label side overlap
        str_side_overlap = str(format(float_side_overlap, ".1f"))
        str_text = "Side overlap: " + str_side_overlap + " %"
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          322, 179, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)
        # label average height object
        str_average_height_object = str(format(float_average_height_object, ".1f"))
        str_text = "Average height object: " + str_average_height_object + " m."
        self.obj_pl.add_label_layout_item(str_text, qfont_default,
                                          322, 185, 86, 6,
                                          Qt.AlignLeft, Qt.AlignVCenter, False)

        # crs - epsg
        str_text = "CRS - EPSG: " + self.str_crs_epsg
        self.obj_pl.add_label_layout_item(str_text, qfont_10_bold,
                                          276, 277, 35, 6,
                                          Qt.AlignCenter, Qt.AlignVCenter, False)

        if os.path.exists(self.path_logo):
            self.obj_pl.add_picture_layout_item(self.path_logo,
                                                318, 13, 49.846, 14.3,
                                                QgsLayoutItemPicture.ZoomResizeFrame)
        else:
            str_msg = "Path main logo " + self.path_logo + " doesn't exist"
            self.iface.messageBar().pushMessage(c.CONST_PFLIPUAV_TITLE,
                                                str_msg,
                                                Qgis.Warning,
                                                20)
        if os.path.exists(self.path_logo_2):
            self.obj_pl.add_picture_layout_item(self.path_logo_2,
                                                384, 13, 24.106, 14.3,
                                                QgsLayoutItemPicture.ZoomResizeFrame)
        else:
            str_msg = "Path secondary logo " + self.path_logo_2 + " doesn't exist"
            self.iface.messageBar().pushMessage(c.CONST_PFLIPUAV_TITLE,
                                                str_msg,
                                                Qgis.Warning,
                                                20)

        self.obj_pl.export(layout_name,
                           self.path_file_map_pdf)

        os.startfile(self.path_file_map_pdf)

        return True